version: '3.8'

networks:
  frontend:
    name: frontend
    driver: bridge
  backend:
    name: backend
    driver: bridge

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    networks:
      - backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-monorepo}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-user}", "-d", "${POSTGRES_DB:-monorepo}"]
      interval: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      args:
        PORT: ${API_PORT:-4000}
        TRUSTED_ORIGINS: ${TRUSTED_ORIGINS:-http://localhost:3000}
    restart: unless-stopped
    networks:
      - frontend
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PORT: ${API_PORT:-4000}
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-monorepo}
      LOG_LEVEL: info
      TRUSTED_ORIGINS: ${TRUSTED_ORIGINS:-http://localhost:3000}
    ports:
      - "${API_PORT:-4000}:${API_PORT:-4000}"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
        labels: "production,api"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://api:4000/api/health-check"]
      interval: 10s
      retries: 5

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        VITE_API_URL: ${API_URL:-http://localhost:4000}
        VITE_IS_DEV: "false"
        NODE_ENV: production
    restart: unless-stopped
    networks:
      - frontend
    depends_on:
      api:
        condition: service_healthy
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:4000}
      VITE_IS_DEV: "false"
      NODE_ENV: production
    ports:
      - "${WEB_PORT:-3000}:${WEB_PORT:-3000}"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
        labels: "production,web"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://web:3000/"]
      interval: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
